'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _metaApiConnection = require('./metaApiConnection');

var _metaApiConnection2 = _interopRequireDefault(_metaApiConnection);

var _notSynchronizedError = require('../clients/metaApi/notSynchronizedError');

var _notSynchronizedError2 = _interopRequireDefault(_notSynchronizedError);

var _randomstring = require('randomstring');

var _randomstring2 = _interopRequireDefault(_randomstring);

var _index = require('./historyFileManager/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {MetaApiConnection}
 */
// eslint-disable-next-line max-statements
describe('MetaApiConnection', () => {

  let sandbox;
  let api;
  let account;
  let client = {
    getAccountInformation: () => {},
    getPositions: () => {},
    getPosition: () => {},
    getOrders: () => {},
    getOrder: () => {},
    getHistoryOrdersByTicket: () => {},
    getHistoryOrdersByPosition: () => {},
    getHistoryOrdersByTimeRange: () => {},
    getDealsByTicket: () => {},
    getDealsByPosition: () => {},
    getDealsByTimeRange: () => {},
    removeHistory: () => {},
    removeApplication: () => {},
    trade: () => {},
    reconnect: () => {},
    synchronize: () => true,
    ensureSubscribe: () => {},
    subscribeToMarketData: () => {},
    unsubscribeFromMarketData: () => {},
    addSynchronizationListener: () => {},
    addReconnectListener: () => {},
    removeSynchronizationListener: () => {},
    removeReconnectListener: () => {},
    getSymbols: () => {},
    getSymbolSpecification: () => {},
    getSymbolPrice: () => {},
    getCandle: () => {},
    getTick: () => {},
    getBook: () => {},
    saveUptime: () => {},
    waitSynchronized: () => {},
    unsubscribe: () => {}
  };

  let connectionRegistry = {
    connect: () => {},
    remove: () => {},
    application: 'MetaApi'
  };

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    account = {
      id: 'accountId',
      state: 'DEPLOYED',
      reload: () => {}
    };
    sandbox.stub(_index2.default.prototype, 'startUpdateJob').returns();
    api = new _metaApiConnection2.default(client, account, undefined, connectionRegistry);
  });

  afterEach(() => {
    sandbox.restore();
  });

  /**
   * @test {MetaApiConnection#getAccountInformation}
   */
  it('should retrieve account information', async () => {
    let accountInformation = {
      broker: 'True ECN Trading Ltd',
      currency: 'USD',
      server: 'ICMarketsSC-Demo',
      balance: 7319.9,
      equity: 7306.649913200001,
      margin: 184.1,
      freeMargin: 7120.22,
      leverage: 100,
      marginLevel: 3967.58283542
    };
    sandbox.stub(client, 'getAccountInformation').resolves(accountInformation);
    let actual = await api.getAccountInformation();
    actual.should.match(accountInformation);
    _sinon2.default.assert.calledWith(client.getAccountInformation, 'accountId');
  });

  /**
   * @test {MetaApiConnection#getPositions}
   */
  it('should retrieve positions', async () => {
    let positions = [{
      id: '46214692',
      type: 'POSITION_TYPE_BUY',
      symbol: 'GBPUSD',
      magic: 1000,
      time: new Date('2020-04-15T02:45:06.521Z'),
      updateTime: new Date('2020-04-15T02:45:06.521Z'),
      openPrice: 1.26101,
      currentPrice: 1.24883,
      currentTickValue: 1,
      volume: 0.07,
      swap: 0,
      profit: -85.25999999999966,
      commission: -0.25,
      clientId: 'TE_GBPUSD_7hyINWqAlE',
      stopLoss: 1.17721,
      unrealizedProfit: -85.25999999999901,
      realizedProfit: -6.536993168992922e-13
    }];
    sandbox.stub(client, 'getPositions').resolves(positions);
    let actual = await api.getPositions();
    actual.should.match(positions);
    _sinon2.default.assert.calledWith(client.getPositions, 'accountId');
  });

  /**
   * @test {MetaApiConnection#getPosition}
   */
  it('should retrieve position by id', async () => {
    let position = {
      id: '46214692',
      type: 'POSITION_TYPE_BUY',
      symbol: 'GBPUSD',
      magic: 1000,
      time: new Date('2020-04-15T02:45:06.521Z'),
      updateTime: new Date('2020-04-15T02:45:06.521Z'),
      openPrice: 1.26101,
      currentPrice: 1.24883,
      currentTickValue: 1,
      volume: 0.07,
      swap: 0,
      profit: -85.25999999999966,
      commission: -0.25,
      clientId: 'TE_GBPUSD_7hyINWqAlE',
      stopLoss: 1.17721,
      unrealizedProfit: -85.25999999999901,
      realizedProfit: -6.536993168992922e-13
    };
    sandbox.stub(client, 'getPosition').resolves(position);
    let actual = await api.getPosition('46214692');
    actual.should.match(position);
    _sinon2.default.assert.calledWith(client.getPosition, 'accountId', '46214692');
  });

  /**
   * @test {MetaApiConnection#getOrders}
   */
  it('should retrieve orders', async () => {
    let orders = [{
      id: '46871284',
      type: 'ORDER_TYPE_BUY_LIMIT',
      state: 'ORDER_STATE_PLACED',
      symbol: 'AUDNZD',
      magic: 123456,
      platform: 'mt5',
      time: new Date('2020-04-20T08:38:58.270Z'),
      openPrice: 1.03,
      currentPrice: 1.05206,
      volume: 0.01,
      currentVolume: 0.01,
      comment: 'COMMENT2'
    }];
    sandbox.stub(client, 'getOrders').resolves(orders);
    let actual = await api.getOrders();
    actual.should.match(orders);
    _sinon2.default.assert.calledWith(client.getOrders, 'accountId');
  });

  /**
   * @test {MetaApiConnection#getOrder}
   */
  it('should retrieve order by id', async () => {
    let order = {
      id: '46871284',
      type: 'ORDER_TYPE_BUY_LIMIT',
      state: 'ORDER_STATE_PLACED',
      symbol: 'AUDNZD',
      magic: 123456,
      platform: 'mt5',
      time: new Date('2020-04-20T08:38:58.270Z'),
      openPrice: 1.03,
      currentPrice: 1.05206,
      volume: 0.01,
      currentVolume: 0.01,
      comment: 'COMMENT2'
    };
    sandbox.stub(client, 'getOrder').resolves(order);
    let actual = await api.getOrder('46871284');
    actual.should.match(order);
    _sinon2.default.assert.calledWith(client.getOrder, 'accountId', '46871284');
  });

  /**
   * @test {MetaApiConnection#getHistoryOrdersByTicket}
   */
  it('should retrieve history orders by ticket', async () => {
    let historyOrders = {
      historyOrders: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        currentPrice: 1.261,
        currentVolume: 0,
        doneTime: new Date('2020-04-15T02:45:06.521Z'),
        id: '46214692',
        magic: 1000,
        platform: 'mt5',
        positionId: '46214692',
        state: 'ORDER_STATE_FILLED',
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.260Z'),
        type: 'ORDER_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getHistoryOrdersByTicket').resolves(historyOrders);
    let actual = await api.getHistoryOrdersByTicket('46214692');
    actual.should.match(historyOrders);
    _sinon2.default.assert.calledWith(client.getHistoryOrdersByTicket, 'accountId', '46214692');
  });

  /**
   * @test {MetaApiConnection#getHistoryOrdersByPosition}
   */
  it('should retrieve history orders by position', async () => {
    let historyOrders = {
      historyOrders: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        currentPrice: 1.261,
        currentVolume: 0,
        doneTime: new Date('2020-04-15T02:45:06.521Z'),
        id: '46214692',
        magic: 1000,
        platform: 'mt5',
        positionId: '46214692',
        state: 'ORDER_STATE_FILLED',
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.260Z'),
        type: 'ORDER_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getHistoryOrdersByPosition').resolves(historyOrders);
    let actual = await api.getHistoryOrdersByPosition('46214692');
    actual.should.match(historyOrders);
    _sinon2.default.assert.calledWith(client.getHistoryOrdersByPosition, 'accountId', '46214692');
  });

  /**
   * @test {MetaApiConnection#getHistoryOrdersByTimeRange}
   */
  it('should retrieve history orders by time range', async () => {
    let historyOrders = {
      historyOrders: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        currentPrice: 1.261,
        currentVolume: 0,
        doneTime: new Date('2020-04-15T02:45:06.521Z'),
        id: '46214692',
        magic: 1000,
        platform: 'mt5',
        positionId: '46214692',
        state: 'ORDER_STATE_FILLED',
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.260Z'),
        type: 'ORDER_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getHistoryOrdersByTimeRange').resolves(historyOrders);
    let startTime = new Date(Date.now() - 1000);
    let endTime = new Date();
    let actual = await api.getHistoryOrdersByTimeRange(startTime, endTime, 1, 100);
    actual.should.match(historyOrders);
    _sinon2.default.assert.calledWith(client.getHistoryOrdersByTimeRange, 'accountId', startTime, endTime, 1, 100);
  });

  /**
   * @test {MetaApiConnection#getDealsByTicket}
   */
  it('should retrieve history deals by ticket', async () => {
    let deals = {
      deals: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        commission: -0.25,
        entryType: 'DEAL_ENTRY_IN',
        id: '33230099',
        magic: 1000,
        platform: 'mt5',
        orderId: '46214692',
        positionId: '46214692',
        price: 1.26101,
        profit: 0,
        swap: 0,
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.521Z'),
        type: 'DEAL_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getDealsByTicket').resolves(deals);
    let actual = await api.getDealsByTicket('46214692');
    actual.should.match(deals);
    _sinon2.default.assert.calledWith(client.getDealsByTicket, 'accountId', '46214692');
  });

  /**
   * @test {MetaApiConnection#getDealsByPosition}
   */
  it('should retrieve history deals by position', async () => {
    let deals = {
      deals: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        commission: -0.25,
        entryType: 'DEAL_ENTRY_IN',
        id: '33230099',
        magic: 1000,
        platform: 'mt5',
        orderId: '46214692',
        positionId: '46214692',
        price: 1.26101,
        profit: 0,
        swap: 0,
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.521Z'),
        type: 'DEAL_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getDealsByPosition').resolves(deals);
    let actual = await api.getDealsByPosition('46214692');
    actual.should.match(deals);
    _sinon2.default.assert.calledWith(client.getDealsByPosition, 'accountId', '46214692');
  });

  /**
   * @test {MetaApiConnection#getDealsByTimeRange}
   */
  it('should retrieve history deals by time range', async () => {
    let deals = {
      deals: [{
        clientId: 'TE_GBPUSD_7hyINWqAlE',
        commission: -0.25,
        entryType: 'DEAL_ENTRY_IN',
        id: '33230099',
        magic: 1000,
        platform: 'mt5',
        orderId: '46214692',
        positionId: '46214692',
        price: 1.26101,
        profit: 0,
        swap: 0,
        symbol: 'GBPUSD',
        time: new Date('2020-04-15T02:45:06.521Z'),
        type: 'DEAL_TYPE_BUY',
        volume: 0.07
      }],
      synchronizing: false
    };
    sandbox.stub(client, 'getDealsByTimeRange').resolves(deals);
    let startTime = new Date(Date.now() - 1000);
    let endTime = new Date();
    let actual = await api.getDealsByTimeRange(startTime, endTime, 1, 100);
    actual.should.match(deals);
    _sinon2.default.assert.calledWith(client.getDealsByTimeRange, 'accountId', startTime, endTime, 1, 100);
  });

  /**
   * @test {MetaApiConnection#removeHistory}
   */
  it('should remove history', async () => {
    sandbox.stub(client, 'removeHistory').resolves();
    sandbox.stub(api.historyStorage, 'clear').resolves();
    await api.removeHistory('app');
    _sinon2.default.assert.calledWith(client.removeHistory, 'accountId', 'app');
    _sinon2.default.assert.calledOnce(api.historyStorage.clear);
  });

  /**
   * @test {MetaApiConnection#removeApplication}
   */
  it('should remove application', async () => {
    sandbox.stub(client, 'removeApplication').resolves();
    sandbox.stub(api.historyStorage, 'clear').resolves();
    await api.removeApplication();
    _sinon2.default.assert.calledWith(client.removeApplication, 'accountId');
    _sinon2.default.assert.calledOnce(api.historyStorage.clear);
  });

  /**
   * @test {MetaApiConnection#createMarketBuyOrder}
   */
  it('should create market buy order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createMarketBuyOrder('GBPUSD', 0.07, 0.9, 2.0, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_BUY', symbol: 'GBPUSD',
      volume: 0.07, stopLoss: 0.9, takeProfit: 2.0, comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createMarketBuyOrder}
   */
  it('should create market buy order with relative SL/TP', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createMarketBuyOrder('GBPUSD', 0.07, { value: 0.1, units: 'RELATIVE_PRICE' }, { value: 2000, units: 'RELATIVE_POINTS' }, { comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_BUY', symbol: 'GBPUSD',
      volume: 0.07, stopLoss: 0.1, stopLossUnits: 'RELATIVE_PRICE', takeProfit: 2000,
      takeProfitUnits: 'RELATIVE_POINTS', comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createMarketSellOrder}
   */
  it('should create market sell order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createMarketSellOrder('GBPUSD', 0.07, 2.0, 0.9, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_SELL', symbol: 'GBPUSD',
      volume: 0.07, stopLoss: 2.0, takeProfit: 0.9, comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createLimitBuyOrder}
   */
  it('should create limit buy order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createLimitBuyOrder('GBPUSD', 0.07, 1.0, 0.9, 2.0, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_BUY_LIMIT',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.0, stopLoss: 0.9, takeProfit: 2.0, comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createLimitSellOrder}
   */
  it('should create limit sell order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createLimitSellOrder('GBPUSD', 0.07, 1.5, 2.0, 0.9, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_SELL_LIMIT',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.5, stopLoss: 2.0, takeProfit: 0.9, comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createStopBuyOrder}
   */
  it('should create stop buy order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createStopBuyOrder('GBPUSD', 0.07, 1.5, 0.9, 2.0, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_BUY_STOP',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.5, stopLoss: 0.9, takeProfit: 2.0, comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createStopSellOrder}
   */
  it('should create stop sell order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createStopSellOrder('GBPUSD', 0.07, 1.0, 2.0, 0.9, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_SELL_STOP',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.0, stopLoss: 2.0, takeProfit: 0.9, comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createStopLimitBuyOrder}
   */
  it('should create stop limit buy order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: 46870472
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createStopLimitBuyOrder('GBPUSD', 0.07, 1.5, 1.4, 0.9, 2.0, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_BUY_STOP_LIMIT',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.5, stopLimitPrice: 1.4, stopLoss: 0.9, takeProfit: 2.0,
      comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#createStopLimitSellOrder}
   */
  it('should create stop limit sell order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.createStopLimitSellOrder('GBPUSD', 0.07, 1.0, 1.1, 2.0, 0.9, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_TYPE_SELL_STOP_LIMIT',
      symbol: 'GBPUSD', volume: 0.07, openPrice: 1.0, stopLimitPrice: 1.1, stopLoss: 2.0, takeProfit: 0.9,
      comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#modifyPosition}
   */
  it('should modify position', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      positionId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.modifyPosition('46870472', 2.0, 0.9);
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'POSITION_MODIFY',
      positionId: '46870472', stopLoss: 2.0, takeProfit: 0.9 }));
  });

  /**
   * @test {MetaApiConnection#closePositionPartially}
   */
  it('should close position partially', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      positionId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.closePositionPartially('46870472', 0.9, { comment: 'comment',
      clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'POSITION_PARTIAL',
      positionId: '46870472', volume: 0.9, comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#closePosition}
   */
  it('should close position', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      positionId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.closePosition('46870472', { comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'POSITION_CLOSE_ID',
      positionId: '46870472', comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#closeBy}
   */
  it('should close position by an opposite one', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      positionId: '46870472',
      closeByPositionId: '46870482'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.closeBy('46870472', '46870482', { comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'POSITION_CLOSE_BY',
      positionId: '46870472', closeByPositionId: '46870482', comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#closePositionsBySymbol}
   */
  it('should close positions by symbol', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      positionId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.closePositionsBySymbol('EURUSD', { comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' });
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'POSITIONS_CLOSE_SYMBOL',
      symbol: 'EURUSD', comment: 'comment', clientId: 'TE_GBPUSD_7hyINWqAlE' }));
  });

  /**
   * @test {MetaApiConnection#modifyOrder}
   */
  it('should modify order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.modifyOrder('46870472', 1.0, 2.0, 0.9);
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_MODIFY', orderId: '46870472',
      openPrice: 1.0, stopLoss: 2.0, takeProfit: 0.9 }));
  });

  /**
   * @test {MetaApiConnection#cancelOrder}
   */
  it('should cancel order', async () => {
    let tradeResult = {
      error: 10009,
      description: 'TRADE_RETCODE_DONE',
      orderId: '46870472'
    };
    sandbox.stub(client, 'trade').resolves(tradeResult);
    let actual = await api.cancelOrder('46870472');
    actual.should.match(tradeResult);
    _sinon2.default.assert.calledWith(client.trade, 'accountId', _sinon2.default.match({ actionType: 'ORDER_CANCEL', orderId: '46870472' }));
  });

  /**
   * @test {MetaApiConnection#reconnect}
   */
  it('should reconnect terminal', async () => {
    sandbox.stub(client, 'reconnect').resolves();
    await api.reconnect();
    _sinon2.default.assert.calledWith(client.reconnect, 'accountId');
  });

  /**
   * @test {MetaApiConnection#subscribe}
   */
  describe('ensure subscribe', () => {

    let clock;

    beforeEach(() => {
      clock = _sinon2.default.useFakeTimers({
        shouldAdvanceTime: true
      });
    });

    afterEach(async () => {
      clock.restore();
    });

    /**
     * @test {MetaApiConnection#subscribe}
     */
    it('should subscribe to terminal', async () => {
      sandbox.stub(client, 'ensureSubscribe').resolves();
      await api.subscribe();
      _sinon2.default.assert.calledWith(client.ensureSubscribe, 'accountId');
    });
  });

  /**
   * @test {MetaApiConnection#synchronize}
   */
  it('should not subscribe if connection is closed', async () => {
    const ensureSubscribeStub = sandbox.stub(client, 'ensureSubscribe').resolves();
    await api.close();
    await api.subscribe();
    _sinon2.default.assert.notCalled(ensureSubscribeStub);
  });

  /**
   * @test {MetaApiConnection#synchronize}
   */
  it('should synchronize state with terminal', async () => {
    sandbox.stub(client, 'synchronize').resolves();
    sandbox.stub(_randomstring2.default, 'generate').returns('synchronizationId');
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    api.historyStorage.onHistoryOrderAdded('1:ps-mpa-1', { doneTime: new Date('2020-01-01T00:00:00.000Z') });
    api.historyStorage.onDealAdded('1:ps-mpa-1', { time: new Date('2020-01-02T00:00:00.000Z') });
    await api.synchronize('1:ps-mpa-1');
    _sinon2.default.assert.calledWith(client.synchronize, 'accountId', 1, 'ps-mpa-1', 'synchronizationId', new Date('2020-01-01T00:00:00.000Z'), new Date('2020-01-02T00:00:00.000Z'));
  });

  /**
   * @test {MetaApiConnection#synchronize}
   */
  it('should synchronize state with terminal from specified time', async () => {
    sandbox.stub(client, 'synchronize').resolves();
    sandbox.stub(_randomstring2.default, 'generate').returns('synchronizationId');
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry, new Date('2020-10-07T00:00:00.000Z'));
    api.historyStorage.onHistoryOrderAdded('1:ps-mpa-1', { doneTime: new Date('2020-01-01T00:00:00.000Z') });
    api.historyStorage.onDealAdded('1:ps-mpa-1', { time: new Date('2020-01-02T00:00:00.000Z') });
    await api.synchronize('1:ps-mpa-1');
    _sinon2.default.assert.calledWith(client.synchronize, 'accountId', 1, 'ps-mpa-1', 'synchronizationId', new Date('2020-10-07T00:00:00.000Z'), new Date('2020-10-07T00:00:00.000Z'));
  });

  /**
   * @test {MetaApiConnection#subscribeToMarketData}
   */
  it('should subscribe to market data', async () => {
    sandbox.stub(client, 'subscribeToMarketData').resolves();
    let promise = api.subscribeToMarketData('EURUSD', [{ type: 'quotes' }], 1);
    api.terminalState.onSymbolPricesUpdated('1:ps-mpa-1', [{ time: new Date(), symbol: 'EURUSD', bid: 1, ask: 1.1 }]);
    await promise;
    _sinon2.default.assert.calledWith(client.subscribeToMarketData, 'accountId', 1, 'EURUSD', [{ type: 'quotes' }]);
  });

  /**
   * @test {MetaApiConnection#unsubscribeFromMarketData}
   */
  it('should unsubscribe from market data', async () => {
    sandbox.stub(client, 'unsubscribeFromMarketData').resolves();
    await api.unsubscribeFromMarketData('EURUSD', [{ type: 'quotes' }], 1);
    _sinon2.default.assert.calledWith(client.unsubscribeFromMarketData, 'accountId', 1, 'EURUSD', [{ type: 'quotes' }]);
  });

  describe('onSubscriptionDowngrade', () => {

    /**
     * @test {MetaApiConnection#onSubscriptionDowngrade}
     */
    it('should unsubscribe during market data subscription downgrade', async () => {
      sandbox.stub(api, 'subscribeToMarketData').resolves();
      sandbox.stub(api, 'unsubscribeFromMarketData').resolves();
      await api.onSubscriptionDowngraded('1:ps-mpa-1', 'EURUSD', undefined, [{ type: 'ticks' }, { type: 'books' }]);
      _sinon2.default.assert.calledWith(api.unsubscribeFromMarketData, 'EURUSD', [{ type: 'ticks' }, { type: 'books' }]);
      _sinon2.default.assert.notCalled(api.subscribeToMarketData);
    });

    /**
     * @test {MetaApiConnection#onSubscriptionDowngrade}
     */
    it('should update market data subscription on downgrade', async () => {
      sandbox.stub(api, 'subscribeToMarketData').resolves();
      sandbox.stub(api, 'unsubscribeFromMarketData').resolves();
      await api.onSubscriptionDowngraded('1:ps-mpa-1', 'EURUSD', [{ type: 'quotes', intervalInMilliseconds: 30000 }]);
      _sinon2.default.assert.calledWith(api.subscribeToMarketData, 'EURUSD', [{ type: 'quotes', intervalInMilliseconds: 30000 }]);
      _sinon2.default.assert.notCalled(api.unsubscribeFromMarketData);
    });
  });

  /**
   * @test {MetaApiConnection#getSymbols}
   */
  it('should retrieve symbols', async () => {
    let symbols = ['EURUSD'];
    sandbox.stub(client, 'getSymbols').resolves(symbols);
    let actual = await api.getSymbols();
    actual.should.match(symbols);
    _sinon2.default.assert.calledWith(client.getSymbols, 'accountId');
  });

  /**
   * @test {MetaApiConnection#getSymbolSpecification}
   */
  it('should retrieve symbol specification', async () => {
    let specification = {
      symbol: 'AUDNZD',
      tickSize: 0.00001,
      minVolume: 0.01,
      maxVolume: 100,
      volumeStep: 0.01
    };
    sandbox.stub(client, 'getSymbolSpecification').resolves(specification);
    let actual = await api.getSymbolSpecification('AUDNZD');
    actual.should.match(specification);
    _sinon2.default.assert.calledWith(client.getSymbolSpecification, 'accountId', 'AUDNZD');
  });

  /**
   * @test {MetaApiConnection#getSymbolPrice}
   */
  it('should retrieve symbol price', async () => {
    let price = {
      symbol: 'AUDNZD',
      bid: 1.05297,
      ask: 1.05309,
      profitTickValue: 0.59731,
      lossTickValue: 0.59736
    };
    sandbox.stub(client, 'getSymbolPrice').resolves(price);
    let actual = await api.getSymbolPrice('AUDNZD');
    actual.should.match(price);
    _sinon2.default.assert.calledWith(client.getSymbolPrice, 'accountId', 'AUDNZD');
  });

  /**
   * @test {MetaApiConnection#getCandle}
   */
  it('should retrieve current candle', async () => {
    let candle = {
      symbol: 'AUDNZD',
      timeframe: '15m',
      time: new Date('2020-04-07T03:45:00.000Z'),
      brokerTime: '2020-04-07 06:45:00.000',
      open: 1.03297,
      high: 1.06309,
      low: 1.02705,
      close: 1.043,
      tickVolume: 1435,
      spread: 17,
      volume: 345
    };
    sandbox.stub(client, 'getCandle').resolves(candle);
    let actual = await api.getCandle('AUDNZD', '15m');
    actual.should.match(candle);
    _sinon2.default.assert.calledWith(client.getCandle, 'accountId', 'AUDNZD', '15m');
  });

  /**
   * @test {MetaApiConnection#getTick}
   */
  it('should retrieve latest tick', async () => {
    let tick = {
      symbol: 'AUDNZD',
      time: new Date('2020-04-07T03:45:00.000Z'),
      brokerTime: '2020-04-07 06:45:00.000',
      bid: 1.05297,
      ask: 1.05309,
      last: 0.5298,
      volume: 0.13,
      side: 'buy'
    };
    sandbox.stub(client, 'getTick').resolves(tick);
    let actual = await api.getTick('AUDNZD');
    actual.should.match(tick);
    _sinon2.default.assert.calledWith(client.getTick, 'accountId', 'AUDNZD');
  });

  /**
   * @test {MetaApiConnection#getBook}
   */
  it('should retrieve latest order book', async () => {
    let book = {
      symbol: 'AUDNZD',
      time: new Date('2020-04-07T03:45:00.000Z'),
      brokerTime: '2020-04-07 06:45:00.000',
      book: [{
        type: 'BOOK_TYPE_SELL',
        price: 1.05309,
        volume: 5.67
      }, {
        type: 'BOOK_TYPE_BUY',
        price: 1.05297,
        volume: 3.45
      }]
    };
    sandbox.stub(client, 'getBook').resolves(book);
    let actual = await api.getBook('AUDNZD');
    actual.should.match(book);
    _sinon2.default.assert.calledWith(client.getBook, 'accountId', 'AUDNZD');
  });

  /**
   * @test {MetaApiConnection#saveUptime}
   */
  it('should save uptime stats to the server', async () => {
    sandbox.stub(client, 'saveUptime').resolves();
    await api.saveUptime({ '1h': 100 });
    _sinon2.default.assert.calledWith(client.saveUptime, 'accountId', { '1h': 100 });
  });

  /**
   * @test {MetaApiConnection#terminalState}
   * @test {MetaApiConnection#historyStorage}
   */
  it('should initialize listeners, terminal state and history storage for accounts with user synch mode', async () => {
    sandbox.stub(client, 'addSynchronizationListener').returns();
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    _should2.default.exist(api.terminalState);
    _should2.default.exist(api.historyStorage);
    _sinon2.default.assert.calledWith(client.addSynchronizationListener, 'accountId', api);
    _sinon2.default.assert.calledWith(client.addSynchronizationListener, 'accountId', api.terminalState);
    _sinon2.default.assert.calledWith(client.addSynchronizationListener, 'accountId', api.historyStorage);
  });

  /**
   * @test {MetaApiConnection#addSynchronizationListener}
   */
  it('should add synchronization listeners', async () => {
    sandbox.stub(client, 'addSynchronizationListener').returns();
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    let listener = {};
    api.addSynchronizationListener(listener);
    _sinon2.default.assert.calledWith(client.addSynchronizationListener, 'accountId', listener);
  });

  /**
   * @test {MetaApiConnection#removeSynchronizationListener}
   */
  it('should remove synchronization listeners', async () => {
    sandbox.stub(client, 'removeSynchronizationListener').returns();
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    let listener = {};
    api.removeSynchronizationListener(listener);
    _sinon2.default.assert.calledWith(client.removeSynchronizationListener, 'accountId', listener);
  });

  /**
   * @test {MetaApiConnection#onConnected}
   */
  it('should sychronize on connection', async () => {
    sandbox.stub(client, 'synchronize').resolves();
    sandbox.stub(_randomstring2.default, 'generate').returns('synchronizationId');
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    api.historyStorage.onHistoryOrderAdded('1:ps-mpa-1', { doneTime: new Date('2020-01-01T00:00:00.000Z') });
    api.historyStorage.onDealAdded('1:ps-mpa-1', { time: new Date('2020-01-02T00:00:00.000Z') });
    await api.onConnected('1:ps-mpa-1', 1);
    await new _promise2.default(res => setTimeout(res, 50));
    _sinon2.default.assert.calledWith(client.synchronize, 'accountId', 1, 'ps-mpa-1', 'synchronizationId', new Date('2020-01-01T00:00:00.000Z'), new Date('2020-01-02T00:00:00.000Z'));
  });

  /**
   * @test {MetaApiConnection#onConnected}
   */
  it('should maintain synchronization if connection has failed', async () => {
    let stub = sandbox.stub(client, 'synchronize');
    stub.onFirstCall().throws(new Error('test error'));
    stub.onSecondCall().resolves();
    sandbox.stub(_randomstring2.default, 'generate').returns('synchronizationId');
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    await api.historyStorage.onHistoryOrderAdded('1:ps-mpa-1', { doneTime: new Date('2020-01-01T00:00:00.000Z') });
    await api.historyStorage.onDealAdded('1:ps-mpa-1', { time: new Date('2020-01-02T00:00:00.000Z') });
    await api.onConnected('1:ps-mpa-1', 1);
    await new _promise2.default(res => setTimeout(res, 50));
    _sinon2.default.assert.calledWith(client.synchronize, 'accountId', 1, 'ps-mpa-1', 'synchronizationId', new Date('2020-01-01T00:00:00.000Z'), new Date('2020-01-02T00:00:00.000Z'));
  });

  /**
   * @test {MetaApiConnection#onConnected}
   */
  it('should not synchronize if connection is closed', async () => {
    let synchronizeStub = sandbox.stub(client, 'synchronize');
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    await api.historyStorage.onHistoryOrderAdded('1:ps-mpa-1', { doneTime: new Date('2020-01-01T00:00:00.000Z') });
    await api.historyStorage.onDealAdded('1:ps-mpa-1', { time: new Date('2020-01-02T00:00:00.000Z') });
    await api.close();
    await api.onConnected('1:ps-mpa-1', 1);
    _sinon2.default.assert.notCalled(synchronizeStub);
  });

  /**
   * @test {MetaApiConnection#onConnected}
   */
  it('should restore market data subscriptions on synchronization', async () => {
    let callCount = 0;
    sandbox.stub(api.terminalState, 'price').callsFake(symbol => {
      callCount++;
      if (callCount === 6) {
        return undefined;
      }
      return { symbol };
    });
    await api.subscribeToMarketData('EURUSD');
    await api.subscribeToMarketData('AUDNZD');
    const subscribeStub = sandbox.stub(client, 'subscribeToMarketData').resolves();
    await api.onAccountInformationUpdated('1:ps-mpa-1', {});
    _sinon2.default.assert.callCount(subscribeStub, 1);
    _sinon2.default.assert.calledWith(subscribeStub, 'accountId', 1, 'AUDNZD');
  });

  /**
   * @test {MetaApiConnection#close}
   */
  it('should unsubscribe from events on close', async () => {
    sandbox.stub(client, 'addSynchronizationListener').returns();
    sandbox.stub(client, 'removeSynchronizationListener').returns();
    sandbox.stub(client, 'unsubscribe').resolves();
    sandbox.stub(connectionRegistry, 'remove').returns();
    api = new _metaApiConnection2.default(client, { id: 'accountId' }, undefined, connectionRegistry);
    await api.close();
    _sinon2.default.assert.calledWith(client.unsubscribe, 'accountId');
    _sinon2.default.assert.calledWith(client.removeSynchronizationListener, 'accountId', api);
    _sinon2.default.assert.calledWith(client.removeSynchronizationListener, 'accountId', api.terminalState);
    _sinon2.default.assert.calledWith(client.removeSynchronizationListener, 'accountId', api.historyStorage);
    _sinon2.default.assert.calledWith(connectionRegistry.remove, 'accountId');
  });

  describe('waitSynchronized', () => {

    /**
     * @test {MetaApiConnection#waitSynchronized}
     */
    it('should wait util synchronization complete', async () => {
      sandbox.stub(client, 'waitSynchronized').resolves();
      _sinon2.default.assert.match((await api.isSynchronized('1:ps-mpa-1')), false);
      (await api.isSynchronized()).should.equal(false);
      let promise = api.waitSynchronized({ applicationPattern: 'app.*', synchronizationId: 'synchronizationId',
        timeoutInSeconds: 1, intervalInMilliseconds: 10 });
      let startTime = Date.now();
      await _promise2.default.race([promise, new _promise2.default(res => setTimeout(res, 50))]);
      (Date.now() - startTime).should.be.approximately(50, 10);
      api.onOrderSynchronizationFinished('1:ps-mpa-1', 'synchronizationId');
      api.onDealSynchronizationFinished('1:ps-mpa-1', 'synchronizationId');
      startTime = Date.now();
      await promise;
      (Date.now() - startTime).should.be.approximately(10, 10);
      (await api.isSynchronized('1:ps-mpa-1', 'synchronizationId')).should.equal(true);
    });

    /**
     * @test {MetaApiConnection#waitSynchronized}
     */
    it('should time out waiting for synchronization complete', async () => {
      try {
        await api.waitSynchronized({ applicationPattern: 'app.*', synchronizationId: 'synchronizationId',
          timeoutInSeconds: 1, intervalInMilliseconds: 10 });
        throw new Error('TimeoutError is expected');
      } catch (err) {
        err.name.should.equal('TimeoutError');
      }
      (await api.isSynchronized('synchronizationId')).should.equal(false);
    });
  });

  /**
   * @test {MetaApiConnection#initialize}
   */
  it('should load data to history storage from disk', async () => {
    sandbox.stub(api.historyStorage, 'initialize').resolves();
    await api.initialize();
    _sinon2.default.assert.calledOnce(api.historyStorage.initialize);
  });

  /**
   * @test {MetaApiConnection#onDisconnected}
   */
  it('should set synchronized false on disconnect', async () => {
    await api.onConnected('1:ps-mpa-1', 2);
    await new _promise2.default(res => setTimeout(res, 50));
    _sinon2.default.assert.match(api.synchronized, true);
    await api.onDisconnected('1:ps-mpa-1');
    _sinon2.default.assert.match(api.synchronized, false);
  });

  /**
   * @test {MetaApiConnection#onDisconnected}
   */
  it('should delete state if stream closed', async () => {
    await api.onConnected('1:ps-mpa-1', 2);
    await new _promise2.default(res => setTimeout(res, 50));
    _sinon2.default.assert.match(api.synchronized, true);
    await api.onStreamClosed('1:ps-mpa-1');
    _sinon2.default.assert.match(api.synchronized, false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,