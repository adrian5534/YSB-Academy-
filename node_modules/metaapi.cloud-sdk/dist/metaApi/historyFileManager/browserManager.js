'use strict';

const FileManager = require('./fileManager');
const { openDB, deleteDB } = require('idb');

/**
 * History storage manager which saves and loads history to IndexedDB
 */
module.exports = class BrowserHistoryManager extends FileManager {

  /**
   * Constructs the history file manager instance
   * @param {String} accountId MetaApi account id
   * @param {String} application MetaApi application id
   * @param {HistoryStorage} historyStorage history storage
   */
  constructor(accountId, application, historyStorage) {
    super(accountId, application, historyStorage);
  }

  /**
   * Retrieves history from IndexedDB
   * @returns {Object} object with deals and historyOrders
   */
  // eslint-disable-next-line complexity
  async getHistoryFromDisk() {
    try {
      const history = {
        deals: [],
        historyOrders: [],
        lastDealTimeByInstanceIndex: {},
        lastHistoryOrderTimeByInstanceIndex: {}
      };
      const db = await this._getDatabase();
      const deals = await db.get('deals', this._accountId + '-' + this._application);
      history.deals = deals && deals.items || [];
      history.lastDealTimeByInstanceIndex = deals && deals.lastDealTimeByInstanceIndex || {};
      const historyOrders = await db.get('historyOrders', this._accountId + '-' + this._application);
      history.historyOrders = historyOrders && historyOrders.items || [];
      history.lastHistoryOrderTimeByInstanceIndex = historyOrders && historyOrders.lastHistoryOrderTimeByInstanceIndex || {};
      db.close();
      return history;
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to get history from ` + `IndexedDB of account ${this._accountId}`, err);
    }
  }

  /**
   * Saves history items to IndexedDB
   */
  async updateDiskStorage() {
    try {
      const db = await this._getDatabase();
      await db.put('deals', { accountIdAndApplication: this._accountId + '-' + this._application,
        items: this._historyStorage.deals,
        lastDealTimeByInstanceIndex: this._historyStorage.lastDealTimeByInstanceIndex });
      await db.put('historyOrders', { accountIdAndApplication: this._accountId + '-' + this._application,
        items: this._historyStorage.historyOrders,
        lastHistoryOrderTimeByInstanceIndex: this._historyStorage.lastHistoryOrderTimeByInstanceIndex });
      db.close();
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to save history into ` + `IndexedDB of account ${this._accountId}`, err);
    }
  }

  /**
   * Deletes storage files from disk
   */
  async deleteStorageFromDisk() {
    try {
      const db = await this._getDatabase();
      await db.delete('deals', this._accountId + '-' + this._application);
      await db.delete('historyOrders', this._accountId + '-' + this._application);
      db.close();
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to delete history from ` + `IndexedDB of account ${this._accountId}`, err);
    }
  }

  /**
   * Opens an IndexedDB database and verifies its structure, recreates if structure is invalid, then returns
   * @returns {IndexedDB} indexed db
   */
  async _getDatabase() {
    const keyPath = 'accountIdAndApplication';
    const db = await openDB('metaapi', 1, {
      upgrade(database, oldVersion, newVersion, transaction) {
        if (!database.objectStoreNames.contains('deals')) {
          database.createObjectStore('deals', { keyPath });
        }
        if (!database.objectStoreNames.contains('historyOrders')) {
          database.createObjectStore('historyOrders', { keyPath });
        }
      }
    });
    if (!db.objectStoreNames.contains('deals') || !db.objectStoreNames.contains('historyOrders')) {
      db.close();
      await deleteDB('metaapi');
      return await this._getDatabase();
    } else {
      const tr = db.transaction(['deals', 'historyOrders'], 'readonly');
      if (tr.objectStore('deals').keyPath !== keyPath || tr.objectStore('historyOrders').keyPath !== keyPath) {
        db.close();
        await deleteDB('metaapi');
        return await this._getDatabase();
      } else {
        return db;
      }
    }
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhQXBpL2hpc3RvcnlGaWxlTWFuYWdlci9icm93c2VyTWFuYWdlci5lczYiXSwibmFtZXMiOlsiRmlsZU1hbmFnZXIiLCJyZXF1aXJlIiwib3BlbkRCIiwiZGVsZXRlREIiLCJtb2R1bGUiLCJleHBvcnRzIiwiQnJvd3Nlckhpc3RvcnlNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJhY2NvdW50SWQiLCJhcHBsaWNhdGlvbiIsImhpc3RvcnlTdG9yYWdlIiwiZ2V0SGlzdG9yeUZyb21EaXNrIiwiaGlzdG9yeSIsImRlYWxzIiwiaGlzdG9yeU9yZGVycyIsImxhc3REZWFsVGltZUJ5SW5zdGFuY2VJbmRleCIsImxhc3RIaXN0b3J5T3JkZXJUaW1lQnlJbnN0YW5jZUluZGV4IiwiZGIiLCJfZ2V0RGF0YWJhc2UiLCJnZXQiLCJfYWNjb3VudElkIiwiX2FwcGxpY2F0aW9uIiwiaXRlbXMiLCJjbG9zZSIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInVwZGF0ZURpc2tTdG9yYWdlIiwicHV0IiwiYWNjb3VudElkQW5kQXBwbGljYXRpb24iLCJfaGlzdG9yeVN0b3JhZ2UiLCJkZWxldGVTdG9yYWdlRnJvbURpc2siLCJkZWxldGUiLCJrZXlQYXRoIiwidXBncmFkZSIsImRhdGFiYXNlIiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImNyZWF0ZU9iamVjdFN0b3JlIiwidHIiLCJvYmplY3RTdG9yZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxjQUFjQyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxNQUFNLEVBQUVDLE1BQUYsRUFBVUMsUUFBVixLQUF1QkYsUUFBUSxLQUFSLENBQTdCOztBQUVBOzs7QUFHQUcsT0FBT0MsT0FBUCxHQUFpQixNQUFNQyxxQkFBTixTQUFvQ04sV0FBcEMsQ0FBZ0Q7O0FBRS9EOzs7Ozs7QUFN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QUdDLFdBQUgsQ0FBZSxlQUFmLEVBQWdDVixPQUFoQyxLQUE0Q0EsT0FBOUYsRUFBdUc7QUFDckdsQixXQUFHTSxLQUFIO0FBQ0EsY0FBTXBCLFNBQVMsU0FBVCxDQUFOO0FBQ0EsZUFBTyxNQUFNLEtBQUtlLFlBQUwsRUFBYjtBQUNELE9BSkQsTUFJTztBQUNMLGVBQU9ELEVBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBekc4RCxDQUFqRSIsImZpbGUiOiJicm93c2VyTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZpbGVNYW5hZ2VyID0gcmVxdWlyZSgnLi9maWxlTWFuYWdlcicpO1xuY29uc3QgeyBvcGVuREIsIGRlbGV0ZURCIH0gPSByZXF1aXJlKCdpZGInKTtcblxuLyoqXG4gKiBIaXN0b3J5IHN0b3JhZ2UgbWFuYWdlciB3aGljaCBzYXZlcyBhbmQgbG9hZHMgaGlzdG9yeSB0byBJbmRleGVkREJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBCcm93c2VySGlzdG9yeU1hbmFnZXIgZXh0ZW5kcyBGaWxlTWFuYWdlciB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIGhpc3RvcnkgZmlsZSBtYW5hZ2VyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhY2NvdW50SWQgTWV0YUFwaSBhY2NvdW50IGlkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhcHBsaWNhdGlvbiBNZXRhQXBpIGFwcGxpY2F0aW9uIGlkXG4gICAqIEBwYXJhbSB7SGlzdG9yeVN0b3JhZ2V9IGhpc3RvcnlTdG9yYWdlIGhpc3Rvcnkgc3RvcmFnZVxuICAgKi9cbiAgY29uc3RydWN0b3IoYWNjb3VudElkLCBhcHBsaWNhdGlvbiwgaGlzdG9yeVN0b3JhZ2UpIHtcbiAgICBzdXBlcihhY2NvdW50SWQsIGFwcGxpY2F0aW9uLCBoaXN0b3J5U3RvcmFnZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGhpc3RvcnkgZnJvbSBJbmRleGVkREJcbiAgICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IHdpdGggZGVhbHMgYW5kIGhpc3RvcnlPcmRlcnNcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIGFzeW5jIGdldEhpc3RvcnlGcm9tRGlzaygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaGlzdG9yeSA9IHtcbiAgICAgICAgZGVhbHM6IFtdLCBcbiAgICAgICAgaGlzdG9yeU9yZGVyczogW10sIFxuICAgICAgICBsYXN0RGVhbFRpbWVCeUluc3RhbmNlSW5kZXg6IHt9LCBcbiAgICAgICAgbGFzdEhpc3RvcnlPcmRlclRpbWVCeUluc3RhbmNlSW5kZXg6IHt9XG4gICAgICB9O1xuICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLl9nZXREYXRhYmFzZSgpO1xuICAgICAgY29uc3QgZGVhbHMgPSBhd2FpdCBkYi5nZXQoJ2RlYWxzJywgdGhpcy5fYWNjb3VudElkICsgJy0nICsgdGhpcy5fYXBwbGljYXRpb24pO1xuICAgICAgaGlzdG9yeS5kZWFscyA9IGRlYWxzICYmIGRlYWxzLml0ZW1zIHx8IFtdO1xuICAgICAgaGlzdG9yeS5sYXN0RGVhbFRpbWVCeUluc3RhbmNlSW5kZXggPSBkZWFscyAmJiBkZWFscy5sYXN0RGVhbFRpbWVCeUluc3RhbmNlSW5kZXggfHwge307XG4gICAgICBjb25zdCBoaXN0b3J5T3JkZXJzID0gYXdhaXQgZGIuZ2V0KCdoaXN0b3J5T3JkZXJzJywgdGhpcy5fYWNjb3VudElkICsgJy0nICsgdGhpcy5fYXBwbGljYXRpb24pO1xuICAgICAgaGlzdG9yeS5oaXN0b3J5T3JkZXJzID0gaGlzdG9yeU9yZGVycyAmJiBoaXN0b3J5T3JkZXJzLml0ZW1zIHx8IFtdO1xuICAgICAgaGlzdG9yeS5sYXN0SGlzdG9yeU9yZGVyVGltZUJ5SW5zdGFuY2VJbmRleCA9IGhpc3RvcnlPcmRlcnMgJiYgXG4gICAgICAgIGhpc3RvcnlPcmRlcnMubGFzdEhpc3RvcnlPcmRlclRpbWVCeUluc3RhbmNlSW5kZXggfHwge307XG4gICAgICBkYi5jbG9zZSgpO1xuICAgICAgcmV0dXJuIGhpc3Rvcnk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFskeyhuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpfV0gRmFpbGVkIHRvIGdldCBoaXN0b3J5IGZyb20gYCArIFxuICAgICAgYEluZGV4ZWREQiBvZiBhY2NvdW50ICR7dGhpcy5fYWNjb3VudElkfWAsIGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIGhpc3RvcnkgaXRlbXMgdG8gSW5kZXhlZERCXG4gICAqL1xuICBhc3luYyB1cGRhdGVEaXNrU3RvcmFnZSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLl9nZXREYXRhYmFzZSgpO1xuICAgICAgYXdhaXQgZGIucHV0KCdkZWFscycsIHthY2NvdW50SWRBbmRBcHBsaWNhdGlvbjogdGhpcy5fYWNjb3VudElkICsgJy0nICsgdGhpcy5fYXBwbGljYXRpb24sXG4gICAgICAgIGl0ZW1zOiB0aGlzLl9oaXN0b3J5U3RvcmFnZS5kZWFscywgXG4gICAgICAgIGxhc3REZWFsVGltZUJ5SW5zdGFuY2VJbmRleDogdGhpcy5faGlzdG9yeVN0b3JhZ2UubGFzdERlYWxUaW1lQnlJbnN0YW5jZUluZGV4fSk7XG4gICAgICBhd2FpdCBkYi5wdXQoJ2hpc3RvcnlPcmRlcnMnLCB7YWNjb3VudElkQW5kQXBwbGljYXRpb246IHRoaXMuX2FjY291bnRJZCArICctJyArIHRoaXMuX2FwcGxpY2F0aW9uLFxuICAgICAgICBpdGVtczogdGhpcy5faGlzdG9yeVN0b3JhZ2UuaGlzdG9yeU9yZGVycyxcbiAgICAgICAgbGFzdEhpc3RvcnlPcmRlclRpbWVCeUluc3RhbmNlSW5kZXg6IHRoaXMuX2hpc3RvcnlTdG9yYWdlLmxhc3RIaXN0b3J5T3JkZXJUaW1lQnlJbnN0YW5jZUluZGV4fSk7XG4gICAgICBkYi5jbG9zZSgpO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBbJHsobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKX1dIEZhaWxlZCB0byBzYXZlIGhpc3RvcnkgaW50byBgICsgXG4gICAgICAgIGBJbmRleGVkREIgb2YgYWNjb3VudCAke3RoaXMuX2FjY291bnRJZH1gLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHN0b3JhZ2UgZmlsZXMgZnJvbSBkaXNrXG4gICAqL1xuICBhc3luYyBkZWxldGVTdG9yYWdlRnJvbURpc2soKXtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLl9nZXREYXRhYmFzZSgpO1xuICAgICAgYXdhaXQgZGIuZGVsZXRlKCdkZWFscycsIHRoaXMuX2FjY291bnRJZCArICctJyArIHRoaXMuX2FwcGxpY2F0aW9uKTtcbiAgICAgIGF3YWl0IGRiLmRlbGV0ZSgnaGlzdG9yeU9yZGVycycsIHRoaXMuX2FjY291bnRJZCArICctJyArIHRoaXMuX2FwcGxpY2F0aW9uKTtcbiAgICAgIGRiLmNsb3NlKCk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFskeyhuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpfV0gRmFpbGVkIHRvIGRlbGV0ZSBoaXN0b3J5IGZyb20gYCArIFxuICAgICAgYEluZGV4ZWREQiBvZiBhY2NvdW50ICR7dGhpcy5fYWNjb3VudElkfWAsIGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGFuIEluZGV4ZWREQiBkYXRhYmFzZSBhbmQgdmVyaWZpZXMgaXRzIHN0cnVjdHVyZSwgcmVjcmVhdGVzIGlmIHN0cnVjdHVyZSBpcyBpbnZhbGlkLCB0aGVuIHJldHVybnNcbiAgICogQHJldHVybnMge0luZGV4ZWREQn0gaW5kZXhlZCBkYlxuICAgKi9cbiAgYXN5bmMgX2dldERhdGFiYXNlKCkge1xuICAgIGNvbnN0IGtleVBhdGggPSAnYWNjb3VudElkQW5kQXBwbGljYXRpb24nO1xuICAgIGNvbnN0IGRiID0gYXdhaXQgb3BlbkRCKCdtZXRhYXBpJywgMSwge1xuICAgICAgdXBncmFkZShkYXRhYmFzZSwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFkYXRhYmFzZS5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdkZWFscycpKSB7XG4gICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoJ2RlYWxzJywge2tleVBhdGh9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ2hpc3RvcnlPcmRlcnMnKSkge1xuICAgICAgICAgIGRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKCdoaXN0b3J5T3JkZXJzJywge2tleVBhdGh9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgICBpZighZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnZGVhbHMnKSB8fCAhZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnaGlzdG9yeU9yZGVycycpKSB7XG4gICAgICBkYi5jbG9zZSgpO1xuICAgICAgYXdhaXQgZGVsZXRlREIoJ21ldGFhcGknKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9nZXREYXRhYmFzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0ciA9IGRiLnRyYW5zYWN0aW9uKFsnZGVhbHMnLCAnaGlzdG9yeU9yZGVycyddLCAncmVhZG9ubHknKTsgIFxuICAgICAgaWYodHIub2JqZWN0U3RvcmUoJ2RlYWxzJykua2V5UGF0aCAhPT0ga2V5UGF0aCB8fCB0ci5vYmplY3RTdG9yZSgnaGlzdG9yeU9yZGVycycpLmtleVBhdGggIT09IGtleVBhdGgpIHtcbiAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgYXdhaXQgZGVsZXRlREIoJ21ldGFhcGknKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2dldERhdGFiYXNlKCk7XG4gICAgICB9IGVsc2UgeyBcbiAgICAgICAgcmV0dXJuIGRiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59OyJdfQ==