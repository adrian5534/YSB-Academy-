'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _fileManager = require('./fileManager');

var _fileManager2 = _interopRequireDefault(_fileManager);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _util = require('util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * History storage file manager which saves and loads history on disk
 */
module.exports = class HistoryFileManager extends _fileManager2.default {

  /**
   * Constructs the history file manager instance
   * @param {String} accountId MetaApi account id
   * @param {String} application MetaApi application id
   * @param {HistoryStorage} historyStorage history storage
   */
  constructor(accountId, application, historyStorage) {
    super(accountId, application, historyStorage);
    this._dealsSize = [];
    this._startNewDealIndex = -1;
    this._historyOrdersSize = [];
    this._startNewOrderIndex = -1;
    this._isUpdating = false;
  }

  /**
   * Helper function to calculate object size in bytes in utf-8 encoding
   * @returns {number} size of object in bytes
   */
  getItemSize(item) {
    return new _util.TextEncoder().encode((0, _stringify2.default)(item)).length;
  }

  /**
   * Retrieves history from saved file
   * @returns {Object} object with deals and historyOrders
   */
  async getHistoryFromDisk() {
    const getItemSize = this.getItemSize;
    const accountId = this._accountId;
    const application = this._application;
    const history = {
      deals: [],
      historyOrders: [],
      lastDealTimeByInstanceIndex: {},
      lastHistoryOrderTimeByInstanceIndex: {}
    };
    _fsExtra2.default.ensureDir('./.metaapi');
    try {
      if (await _fsExtra2.default.pathExists(`./.metaapi/${accountId}-${application}-config.bin`)) {
        let config = JSON.parse((await _fsExtra2.default.readFile(`./.metaapi/${accountId}-${application}-config.bin`, 'utf-8')).toString('utf-8'));
        history.lastDealTimeByInstanceIndex = config.lastDealTimeByInstanceIndex;
        history.lastHistoryOrderTimeByInstanceIndex = config.lastHistoryOrderTimeByInstanceIndex;
      }
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to read ` + `history storage config of account ${accountId}`, err);
      await _fsExtra2.default.remove(`./.metaapi/${accountId}-${application}-config.bin`);
    }
    try {
      if (await _fsExtra2.default.pathExists(`./.metaapi/${accountId}-${application}-deals.bin`)) {
        let deals = JSON.parse((await _fsExtra2.default.readFile(`./.metaapi/${accountId}-${application}-deals.bin`, 'utf-8')).toString('utf-8'));
        this._dealsSize = deals.map(deal => getItemSize(deal));
        history.deals = deals.map(deal => {
          deal.time = new Date(deal.time);
          return deal;
        });
      }
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to read deals ` + `history storage of account ${accountId}`, err);
      await _fsExtra2.default.remove(`./.metaapi/${accountId}-${application}-deals.bin`);
    }
    try {
      if (await _fsExtra2.default.pathExists(`./.metaapi/${accountId}-${application}-historyOrders.bin`)) {
        let historyOrders = JSON.parse((await _fsExtra2.default.readFile(`./.metaapi/${accountId}-${application}-historyOrders.bin`, 'utf-8')).toString('utf-8'));
        this._historyOrdersSize = historyOrders.map(historyOrder => getItemSize(historyOrder));
        history.historyOrders = historyOrders.map(historyOrder => {
          historyOrder.time = new Date(historyOrder.time);
          historyOrder.doneTime = new Date(historyOrder.doneTime);
          return historyOrder;
        });
      }
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Failed to read historyOrders ` + `history storage of account ${accountId}`, err);
      await _fsExtra2.default.remove(`./.metaapi/${accountId}-${application}-historyOrders.bin`);
    }
    return history;
  }

  /**
   * Saves unsaved history items to disk storage
   */
  async updateDiskStorage() {
    _fsExtra2.default.ensureDir('./.metaapi');
    const getItemSize = this.getItemSize;
    const accountId = this._accountId;
    const application = this._application;
    const historyStorage = this._historyStorage;
    async function replaceRecords(type, startIndex, replaceItems, sizeArray) {
      const filePath = `./.metaapi/${accountId}-${application}-${type}.bin`;
      let fileSize = (await _fsExtra2.default.stat(filePath)).size;
      if (startIndex === 0) {
        await _fsExtra2.default.writeFile(filePath, (0, _stringify2.default)(replaceItems), 'utf-8');
      } else {
        const replacedItems = sizeArray.slice(startIndex);
        // replacedItems.length - skip commas, replacedItems.reduce - skip item sizes, 1 - skip ] at the end
        const startPosition = fileSize - replacedItems.length - replacedItems.reduce((a, b) => a + b, 0) - 1;
        await _fsExtra2.default.truncate(filePath, startPosition);
        await _fsExtra2.default.appendFile(filePath, ',' + (0, _stringify2.default)(replaceItems).slice(1), { encoding: 'utf-8' });
      }
      return sizeArray.slice(0, startIndex).concat(replaceItems.map(item => getItemSize(item)));
    }

    if (!this._isUpdating) {
      this._isUpdating = true;
      try {
        await this._updateConfig();
        if (this._startNewDealIndex !== -1) {
          const filePath = `./.metaapi/${accountId}-${application}-deals.bin`;
          if (!(await _fsExtra2.default.pathExists(filePath))) {
            const deals = (0, _stringify2.default)(historyStorage.deals);
            _fsExtra2.default.writeFile(filePath, deals, 'utf-8', err => {
              if (err) {
                console.error(`[${new Date().toISOString()}] Error saving deals ` + `on disk for account ${accountId}`, err);
              }
            });
            this._dealsSize = historyStorage.deals.map(item => getItemSize(item));
          } else {
            const replaceDeals = historyStorage.deals.slice(this._startNewDealIndex);
            this._dealsSize = await replaceRecords('deals', this._startNewDealIndex, replaceDeals, this._dealsSize);
          }
          this._startNewDealIndex = -1;
        }
        if (this._startNewOrderIndex !== -1) {
          const filePath = `./.metaapi/${accountId}-${application}-historyOrders.bin`;
          if (!(await _fsExtra2.default.pathExists(filePath))) {
            const historyOrders = (0, _stringify2.default)(historyStorage.historyOrders);
            _fsExtra2.default.writeFile(filePath, historyOrders, 'utf-8', err => {
              if (err) {
                console.error(`[${new Date().toISOString()}] Error saving historyOrders ` + `on disk for account ${accountId}`, err);
              }
            });
            this._historyOrdersSize = historyStorage.historyOrders.map(item => getItemSize(item));
          } else {
            const replaceOrders = historyStorage.historyOrders.slice(this._startNewOrderIndex);
            this._historyOrdersSize = await replaceRecords('historyOrders', this._startNewOrderIndex, replaceOrders, this._historyOrdersSize);
          }
          this._startNewOrderIndex = -1;
        }
      } catch (err) {
        console.error(`[${new Date().toISOString()}] Error updating disk storage ` + `for account ${accountId}`, err);
      }
      this._isUpdating = false;
    }
  }

  /**
   * Updates stored config for account
   */
  async _updateConfig() {
    const accountId = this._accountId;
    const application = this._application;
    const historyStorage = this._historyStorage;
    const filePath = `./.metaapi/${accountId}-${application}-config.bin`;
    try {
      const config = {
        lastDealTimeByInstanceIndex: historyStorage.lastDealTimeByInstanceIndex,
        lastHistoryOrderTimeByInstanceIndex: historyStorage.lastHistoryOrderTimeByInstanceIndex
      };
      await _fsExtra2.default.writeFile(filePath, (0, _stringify2.default)(config), 'utf-8');
    } catch (err) {
      console.error(`[${new Date().toISOString()}] Error updating disk storage config ` + `for account ${accountId}`, err);
    }
  }

  /**
   * Deletes storage files from disk
   */
  async deleteStorageFromDisk() {
    await _fsExtra2.default.remove(`./.metaapi/${this._accountId}-${this._application}-config.bin`);
    await _fsExtra2.default.remove(`./.metaapi/${this._accountId}-${this._application}-deals.bin`);
    await _fsExtra2.default.remove(`./.metaapi/${this._accountId}-${this._application}-historyOrders.bin`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhQXBpL2hpc3RvcnlGaWxlTWFuYWdlci9ub2RlTWFuYWdlci5lczYiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkhpc3RvcnlGaWxlTWFuYWdlciIsIkZpbGVNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJhY2NvdW50SWQiLCJhcHBsaWNhdGlvbiIsImhpc3RvcnlTdG9yYWdlIiwiX2RlYWxzU2l6ZSIsIl9zdGFydE5ld0RlYWxJbmRleCIsIl9oaXN0b3J5T3JkZXJzU2l6ZSIsIl9zdGFydE5ld09yZGVySW5kZXgiLCJfaXNVcGRhdGluZyIsImdldEl0ZW1TaXplIiwiaXRlbSIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwibGVuZ3RoIiwiZ2V0SGlzdG9yeUZyb21EaXNrIiwiX2FjY291bnRJZCIsIl9hcHBsaWNhdGlvbiIsImhpc3RvcnkiLCJkZWFscyIsImhpc3RvcnlPcmRlcnMiLCJsYXN0RGVhbFRpbWVCeUluc3RhbmNlSW5kZXgiLCJsYXN0SGlzdG9yeU9yZGVyVGltZUJ5SW5zdGFuY2VJbmRleCIsImZzIiwiZW5zdXJlRGlyIiwicGF0aEV4aXN0cyIsImNvbmZpZyIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlIiwidG9TdHJpbmciLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZW1vdmUiLCJtYXAiLCJkZWFsIiwidGltZSIsImhpc3RvcnlPcmRlciIsImRvbmVUaW1lIiwidXBkYXRlRGlza1N0b3JhZ2UiLCJfaGlzdG9yeVN0b3JhZ2UiLCJyZXBsYWNlUmVjb3JkcyIsInR5cGUiLCJzdGFydEluZGV4IiwicmVwbGFjZUl0ZW1zIiwic2l6ZUFycmF5IiwiZmlsZVBhdGgiLCJmaWxlU2l6ZSIsInN0YXQiLCJzaXplIiwid3JpdGVGaWxlIiwicmVwbGFjZWRJdGVtcyIsInNsaWNlIiwic3RhcnRQb3NpdGlvbiIsInJlZHVjZSIsImEiLCJiIiwidHJ1bmNhdGUiLCJhcHBlbmRGaWxlIiwiZW5jb2RpbmciLCJjb25jYXQiLCJfdXBkYXRlQ29uZmlnIiwicmVwbGFjZURlYWxzIiwicmVwbGFjZU9yZGVycyIsImRlbGV0ZVN0b3JhZ2VGcm9tRGlzayJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUdBOzs7QUFHQUEsT0FBT0MsT0FBUCxHQUFpQixNQUFNQyxrQkFBTixTQUFpQ0MscUJBQWpDLENBQTZDOztBQUU1RDs7Ozs7O0FBTUFDLGNBQVlDLFNBQVosRUFBdUJDLFdBQXZCLEVBQW9DQyxjQUFwQyxFQUFvRDtBQUNsRCxVQUFNRixTQUFOLEVBQWlCQyxXQUFqQixFQUE4QkMsY0FBOUI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIsQ0FBQyxDQUEzQjtBQUNBLFNBQUtDLGtCQUFMLEdBQTBCLEVBQTFCO0FBQ0EsU0FBS0MsbUJBQUwsR0FBMkIsQ0FBQyxDQUE1QjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsS0FBbkI7QUFDRDs7QUFFRDs7OztBQUlBQyxjQUFZQyxJQUFaLEVBQWtCO0FBQ2hCLFdBQVEsSUFBSUMsaUJBQUosR0FBa0JDLE1BQWxCLENBQXlCLHlCQUFlRixJQUFmLENBQXpCLENBQUQsQ0FBaURHLE1BQXhEO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxRQUFNQyxrQkFBTixHQUEyQjtBQUN6QixVQUFNTCxjQUFjLEtBQUtBLFdBQXpCO0FBQ0EsVUFBTVIsWUFBWSxLQUFLYyxVQUF2QjtBQUNBLFVBQU1iLGNBQWMsS0FBS2MsWUFBekI7QUFDQSxVQUFNQyxVQUFVO0FBQ2RDLGFBQU8sRUFETztBQUVkQyxxQkFBZSxFQUZEO0FBR2RDLG1DQUE2QixFQUhmO0FBSWRDLDJDQUFxQztBQUp2QixLQUFoQjtBQU1BQyxzQkFBR0MsU0FBSCxDQUFhLFlBQWI7QUFDQSxRQUFJO0FBQ0YsVUFBRyxNQUFNRCxrQkFBR0UsVUFBSCxDQUFlLGNBQWF2QixTQUFVLElBQUdDLFdBQVksYUFBckQsQ0FBVCxFQUE2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cG9ydCBGaWxlTWFuYWdlciBmcm9tICcuL2ZpbGVNYW5hZ2VyJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBUZXh0RW5jb2RlciB9IGZyb20gJ3V0aWwnO1xuXG5cbi8qKlxuICogSGlzdG9yeSBzdG9yYWdlIGZpbGUgbWFuYWdlciB3aGljaCBzYXZlcyBhbmQgbG9hZHMgaGlzdG9yeSBvbiBkaXNrXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSGlzdG9yeUZpbGVNYW5hZ2VyIGV4dGVuZHMgRmlsZU1hbmFnZXIge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBoaXN0b3J5IGZpbGUgbWFuYWdlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudElkIE1ldGFBcGkgYWNjb3VudCBpZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwbGljYXRpb24gTWV0YUFwaSBhcHBsaWNhdGlvbiBpZFxuICAgKiBAcGFyYW0ge0hpc3RvcnlTdG9yYWdlfSBoaXN0b3J5U3RvcmFnZSBoaXN0b3J5IHN0b3JhZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFjY291bnRJZCwgYXBwbGljYXRpb24sIGhpc3RvcnlTdG9yYWdlKSB7XG4gICAgc3VwZXIoYWNjb3VudElkLCBhcHBsaWNhdGlvbiwgaGlzdG9yeVN0b3JhZ2UpO1xuICAgIHRoaXMuX2RlYWxzU2l6ZSA9IFtdO1xuICAgIHRoaXMuX3N0YXJ0TmV3RGVhbEluZGV4ID0gLTE7XG4gICAgdGhpcy5faGlzdG9yeU9yZGVyc1NpemUgPSBbXTtcbiAgICB0aGlzLl9zdGFydE5ld09yZGVySW5kZXggPSAtMTtcbiAgICB0aGlzLl9pc1VwZGF0aW5nID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBvYmplY3Qgc2l6ZSBpbiBieXRlcyBpbiB1dGYtOCBlbmNvZGluZ1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBzaXplIG9mIG9iamVjdCBpbiBieXRlc1xuICAgKi9cbiAgZ2V0SXRlbVNpemUoaXRlbSkge1xuICAgIHJldHVybiAobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGl0ZW0pKSkubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBoaXN0b3J5IGZyb20gc2F2ZWQgZmlsZVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3Qgd2l0aCBkZWFscyBhbmQgaGlzdG9yeU9yZGVyc1xuICAgKi9cbiAgYXN5bmMgZ2V0SGlzdG9yeUZyb21EaXNrKCkge1xuICAgIGNvbnN0IGdldEl0ZW1TaXplID0gdGhpcy5nZXRJdGVtU2l6ZTtcbiAgICBjb25zdCBhY2NvdW50SWQgPSB0aGlzLl9hY2NvdW50SWQ7XG4gICAgY29uc3QgYXBwbGljYXRpb24gPSB0aGlzLl9hcHBsaWNhdGlvbjtcbiAgICBjb25zdCBoaXN0b3J5ID0ge1xuICAgICAgZGVhbHM6IFtdLCBcbiAgICAgIGhpc3RvcnlPcmRlcnM6IFtdLCBcbiAgICAgIGxhc3REZWFsVGltZUJ5SW5zdGFuY2VJbmRleDoge30sIFxuICAgICAgbGFzdEhpc3RvcnlPcmRlclRpbWVCeUluc3RhbmNlSW5kZXg6IHt9XG4gICAgfTtcbiAgICBmcy5lbnN1cmVEaXIoJy4vLm1ldGFhcGknKTtcbiAgICB0cnkge1xuICAgICAgaWYoYXdhaXQgZnMucGF0aEV4aXN0cyhgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tY29uZmlnLmJpbmApKSB7XG4gICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKChhd2FpdCBmcy5yZWFkRmlsZShgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tY29uZmlnLmJpbmAsICd1dGYtOCcpKVxuICAgICAgICAgIC50b1N0cmluZygndXRmLTgnKSk7XG4gICAgICAgIGhpc3RvcnkubGFzdERlYWxUaW1lQnlJbnN0YW5jZUluZGV4ID0gY29uZmlnLmxhc3REZWFsVGltZUJ5SW5zdGFuY2VJbmRleDtcbiAgICAgICAgaGlzdG9yeS5sYXN0SGlzdG9yeU9yZGVyVGltZUJ5SW5zdGFuY2VJbmRleCA9IGNvbmZpZy5sYXN0SGlzdG9yeU9yZGVyVGltZUJ5SW5zdGFuY2VJbmRleDtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgWyR7KG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCl9XSBGYWlsZWQgdG8gcmVhZCBgICsgXG4gICAgICBgaGlzdG9yeSBzdG9yYWdlIGNvbmZpZyBvZiBhY2NvdW50ICR7YWNjb3VudElkfWAsIGVycik7XG4gICAgICBhd2FpdCBmcy5yZW1vdmUoYC4vLm1ldGFhcGkvJHthY2NvdW50SWR9LSR7YXBwbGljYXRpb259LWNvbmZpZy5iaW5gKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlmKGF3YWl0IGZzLnBhdGhFeGlzdHMoYC4vLm1ldGFhcGkvJHthY2NvdW50SWR9LSR7YXBwbGljYXRpb259LWRlYWxzLmJpbmApKSB7XG4gICAgICAgIGxldCBkZWFscyA9IEpTT04ucGFyc2UoKGF3YWl0IGZzLnJlYWRGaWxlKGAuLy5tZXRhYXBpLyR7YWNjb3VudElkfS0ke2FwcGxpY2F0aW9ufS1kZWFscy5iaW5gLCAndXRmLTgnKSlcbiAgICAgICAgICAudG9TdHJpbmcoJ3V0Zi04JykpO1xuICAgICAgICB0aGlzLl9kZWFsc1NpemUgPSBkZWFscy5tYXAoZGVhbCA9PiBnZXRJdGVtU2l6ZShkZWFsKSk7XG4gICAgICAgIGhpc3RvcnkuZGVhbHMgPSBkZWFscy5tYXAoKGRlYWwpID0+IHtcbiAgICAgICAgICBkZWFsLnRpbWUgPSBuZXcgRGF0ZShkZWFsLnRpbWUpO1xuICAgICAgICAgIHJldHVybiBkZWFsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgWyR7KG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCl9XSBGYWlsZWQgdG8gcmVhZCBkZWFscyBgICsgXG4gICAgICBgaGlzdG9yeSBzdG9yYWdlIG9mIGFjY291bnQgJHthY2NvdW50SWR9YCwgZXJyKTtcbiAgICAgIGF3YWl0IGZzLnJlbW92ZShgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tZGVhbHMuYmluYCk7XG4gICAgfVxuICAgIHRyeXtcbiAgICAgIGlmKGF3YWl0IGZzLnBhdGhFeGlzdHMoYC4vLm1ldGFhcGkvJHthY2NvdW50SWR9LSR7YXBwbGljYXRpb259LWhpc3RvcnlPcmRlcnMuYmluYCkpIHtcbiAgICAgICAgbGV0IGhpc3RvcnlPcmRlcnMgPSBKU09OLnBhcnNlKChhd2FpdCBmcy5yZWFkRmlsZShgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0taGlzdG9yeU9yZGVycy5iaW5gLFxuICAgICAgICAgICd1dGYtOCcpKS50b1N0cmluZygndXRmLTgnKSk7XG4gICAgICAgIHRoaXMuX2hpc3RvcnlPcmRlcnNTaXplID0gaGlzdG9yeU9yZGVycy5tYXAoaGlzdG9yeU9yZGVyID0+IGdldEl0ZW1TaXplKGhpc3RvcnlPcmRlcikpO1xuICAgICAgICBoaXN0b3J5Lmhpc3RvcnlPcmRlcnMgPSBoaXN0b3J5T3JkZXJzLm1hcCgoaGlzdG9yeU9yZGVyKSA9PiB7XG4gICAgICAgICAgaGlzdG9yeU9yZGVyLnRpbWUgPSBuZXcgRGF0ZShoaXN0b3J5T3JkZXIudGltZSk7XG4gICAgICAgICAgaGlzdG9yeU9yZGVyLmRvbmVUaW1lID0gbmV3IERhdGUoaGlzdG9yeU9yZGVyLmRvbmVUaW1lKTtcbiAgICAgICAgICByZXR1cm4gaGlzdG9yeU9yZGVyO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgWyR7KG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCl9XSBGYWlsZWQgdG8gcmVhZCBoaXN0b3J5T3JkZXJzIGAgKyBcbiAgICAgIGBoaXN0b3J5IHN0b3JhZ2Ugb2YgYWNjb3VudCAke2FjY291bnRJZH1gLCBlcnIpO1xuICAgICAgYXdhaXQgZnMucmVtb3ZlKGAuLy5tZXRhYXBpLyR7YWNjb3VudElkfS0ke2FwcGxpY2F0aW9ufS1oaXN0b3J5T3JkZXJzLmJpbmApO1xuICAgIH1cbiAgICByZXR1cm4gaGlzdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB1bnNhdmVkIGhpc3RvcnkgaXRlbXMgdG8gZGlzayBzdG9yYWdlXG4gICAqL1xuICBhc3luYyB1cGRhdGVEaXNrU3RvcmFnZSgpIHtcbiAgICBmcy5lbnN1cmVEaXIoJy4vLm1ldGFhcGknKTtcbiAgICBjb25zdCBnZXRJdGVtU2l6ZSA9IHRoaXMuZ2V0SXRlbVNpemU7XG4gICAgY29uc3QgYWNjb3VudElkID0gdGhpcy5fYWNjb3VudElkO1xuICAgIGNvbnN0IGFwcGxpY2F0aW9uID0gdGhpcy5fYXBwbGljYXRpb247XG4gICAgY29uc3QgaGlzdG9yeVN0b3JhZ2UgPSB0aGlzLl9oaXN0b3J5U3RvcmFnZTtcbiAgICBhc3luYyBmdW5jdGlvbiByZXBsYWNlUmVjb3Jkcyh0eXBlLCBzdGFydEluZGV4LCByZXBsYWNlSXRlbXMsIHNpemVBcnJheSkge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSBgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tJHt0eXBlfS5iaW5gO1xuICAgICAgbGV0IGZpbGVTaXplID0gKGF3YWl0IGZzLnN0YXQoZmlsZVBhdGgpKS5zaXplO1xuICAgICAgaWYoc3RhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KHJlcGxhY2VJdGVtcyksICd1dGYtOCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVwbGFjZWRJdGVtcyA9IHNpemVBcnJheS5zbGljZShzdGFydEluZGV4KTtcbiAgICAgICAgLy8gcmVwbGFjZWRJdGVtcy5sZW5ndGggLSBza2lwIGNvbW1hcywgcmVwbGFjZWRJdGVtcy5yZWR1Y2UgLSBza2lwIGl0ZW0gc2l6ZXMsIDEgLSBza2lwIF0gYXQgdGhlIGVuZFxuICAgICAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gZmlsZVNpemUgLSByZXBsYWNlZEl0ZW1zLmxlbmd0aCAtIHJlcGxhY2VkSXRlbXMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLSAxO1xuICAgICAgICBhd2FpdCBmcy50cnVuY2F0ZShmaWxlUGF0aCwgc3RhcnRQb3NpdGlvbik7XG4gICAgICAgIGF3YWl0IGZzLmFwcGVuZEZpbGUoZmlsZVBhdGgsIFxuICAgICAgICAgICcsJyArIEpTT04uc3RyaW5naWZ5KHJlcGxhY2VJdGVtcykuc2xpY2UoMSksIHtlbmNvZGluZzogJ3V0Zi04J30pO1xuICAgICAgfSAgICAgICAgXG4gICAgICByZXR1cm4gc2l6ZUFycmF5LnNsaWNlKDAsIHN0YXJ0SW5kZXgpLmNvbmNhdChyZXBsYWNlSXRlbXMubWFwKGl0ZW0gPT4gZ2V0SXRlbVNpemUoaXRlbSkpKTtcbiAgICB9XG5cbiAgICBpZighdGhpcy5faXNVcGRhdGluZykge1xuICAgICAgdGhpcy5faXNVcGRhdGluZyA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVDb25maWcoKTtcbiAgICAgICAgaWYodGhpcy5fc3RhcnROZXdEZWFsSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tZGVhbHMuYmluYDtcbiAgICAgICAgICBpZighYXdhaXQgZnMucGF0aEV4aXN0cyhmaWxlUGF0aCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlYWxzID0gSlNPTi5zdHJpbmdpZnkoaGlzdG9yeVN0b3JhZ2UuZGVhbHMpO1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVQYXRoLCBkZWFscywgJ3V0Zi04JywgKGVycikgPT4ge1xuICAgICAgICAgICAgICBpZihlcnIpIHtjb25zb2xlLmVycm9yKGBbJHsobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKX1dIEVycm9yIHNhdmluZyBkZWFscyBgICtcbiAgICAgICAgICBgb24gZGlzayBmb3IgYWNjb3VudCAke2FjY291bnRJZH1gLCBlcnIpO319KTtcbiAgICAgICAgICAgIHRoaXMuX2RlYWxzU2l6ZSA9IGhpc3RvcnlTdG9yYWdlLmRlYWxzLm1hcChpdGVtID0+IGdldEl0ZW1TaXplKGl0ZW0pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZURlYWxzID0gaGlzdG9yeVN0b3JhZ2UuZGVhbHMuc2xpY2UodGhpcy5fc3RhcnROZXdEZWFsSW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fZGVhbHNTaXplID0gYXdhaXQgcmVwbGFjZVJlY29yZHMoJ2RlYWxzJywgdGhpcy5fc3RhcnROZXdEZWFsSW5kZXgsIHJlcGxhY2VEZWFscywgdGhpcy5fZGVhbHNTaXplKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fc3RhcnROZXdEZWFsSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLl9zdGFydE5ld09yZGVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0taGlzdG9yeU9yZGVycy5iaW5gO1xuICAgICAgICAgIGlmKCFhd2FpdCBmcy5wYXRoRXhpc3RzKGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgY29uc3QgaGlzdG9yeU9yZGVycyA9IEpTT04uc3RyaW5naWZ5KGhpc3RvcnlTdG9yYWdlLmhpc3RvcnlPcmRlcnMpO1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVQYXRoLCBoaXN0b3J5T3JkZXJzLCAndXRmLTgnLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIGlmKGVycikge2NvbnNvbGUuZXJyb3IoYFskeyhuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpfV0gRXJyb3Igc2F2aW5nIGhpc3RvcnlPcmRlcnMgYCArIFxuICAgICAgICAgIGBvbiBkaXNrIGZvciBhY2NvdW50ICR7YWNjb3VudElkfWAsIGVycik7fX0pO1xuICAgICAgICAgICAgdGhpcy5faGlzdG9yeU9yZGVyc1NpemUgPSBoaXN0b3J5U3RvcmFnZS5oaXN0b3J5T3JkZXJzLm1hcChpdGVtID0+IGdldEl0ZW1TaXplKGl0ZW0pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZU9yZGVycyA9IGhpc3RvcnlTdG9yYWdlLmhpc3RvcnlPcmRlcnMuc2xpY2UodGhpcy5fc3RhcnROZXdPcmRlckluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX2hpc3RvcnlPcmRlcnNTaXplID0gYXdhaXQgcmVwbGFjZVJlY29yZHMoJ2hpc3RvcnlPcmRlcnMnLCB0aGlzLl9zdGFydE5ld09yZGVySW5kZXgsIFxuICAgICAgICAgICAgICByZXBsYWNlT3JkZXJzLCB0aGlzLl9oaXN0b3J5T3JkZXJzU2l6ZSk7XG4gICAgICAgICAgfSAgXG4gICAgICAgICAgdGhpcy5fc3RhcnROZXdPcmRlckluZGV4ID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFskeyhuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpfV0gRXJyb3IgdXBkYXRpbmcgZGlzayBzdG9yYWdlIGAgKyBcbiAgICAgICAgICBgZm9yIGFjY291bnQgJHthY2NvdW50SWR9YCwgZXJyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2lzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBzdG9yZWQgY29uZmlnIGZvciBhY2NvdW50XG4gICAqL1xuICBhc3luYyBfdXBkYXRlQ29uZmlnKCkge1xuICAgIGNvbnN0IGFjY291bnRJZCA9IHRoaXMuX2FjY291bnRJZDtcbiAgICBjb25zdCBhcHBsaWNhdGlvbiA9IHRoaXMuX2FwcGxpY2F0aW9uO1xuICAgIGNvbnN0IGhpc3RvcnlTdG9yYWdlID0gdGhpcy5faGlzdG9yeVN0b3JhZ2U7XG4gICAgY29uc3QgZmlsZVBhdGggPSBgLi8ubWV0YWFwaS8ke2FjY291bnRJZH0tJHthcHBsaWNhdGlvbn0tY29uZmlnLmJpbmA7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgbGFzdERlYWxUaW1lQnlJbnN0YW5jZUluZGV4OiBoaXN0b3J5U3RvcmFnZS5sYXN0RGVhbFRpbWVCeUluc3RhbmNlSW5kZXgsXG4gICAgICAgIGxhc3RIaXN0b3J5T3JkZXJUaW1lQnlJbnN0YW5jZUluZGV4OiBoaXN0b3J5U3RvcmFnZS5sYXN0SGlzdG9yeU9yZGVyVGltZUJ5SW5zdGFuY2VJbmRleFxuICAgICAgfTtcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSwgJ3V0Zi04Jyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBbJHsobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKX1dIEVycm9yIHVwZGF0aW5nIGRpc2sgc3RvcmFnZSBjb25maWcgYCArIFxuICAgICAgICAgIGBmb3IgYWNjb3VudCAke2FjY291bnRJZH1gLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHN0b3JhZ2UgZmlsZXMgZnJvbSBkaXNrXG4gICAqL1xuICBhc3luYyBkZWxldGVTdG9yYWdlRnJvbURpc2soKXtcbiAgICBhd2FpdCBmcy5yZW1vdmUoYC4vLm1ldGFhcGkvJHt0aGlzLl9hY2NvdW50SWR9LSR7dGhpcy5fYXBwbGljYXRpb259LWNvbmZpZy5iaW5gKTtcbiAgICBhd2FpdCBmcy5yZW1vdmUoYC4vLm1ldGFhcGkvJHt0aGlzLl9hY2NvdW50SWR9LSR7dGhpcy5fYXBwbGljYXRpb259LWRlYWxzLmJpbmApO1xuICAgIGF3YWl0IGZzLnJlbW92ZShgLi8ubWV0YWFwaS8ke3RoaXMuX2FjY291bnRJZH0tJHt0aGlzLl9hcHBsaWNhdGlvbn0taGlzdG9yeU9yZGVycy5iaW5gKTtcbiAgfVxufTtcbiJdfQ==