'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _httpClient = require('../clients/httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _provisioningProfile = require('../clients/metaApi/provisioningProfile.client');

var _provisioningProfile2 = _interopRequireDefault(_provisioningProfile);

var _provisioningProfileApi = require('./provisioningProfileApi');

var _provisioningProfileApi2 = _interopRequireDefault(_provisioningProfileApi);

var _metaApiWebsocket = require('../clients/metaApi/metaApiWebsocket.client');

var _metaApiWebsocket2 = _interopRequireDefault(_metaApiWebsocket);

var _metatraderAccountApi = require('./metatraderAccountApi');

var _metatraderAccountApi2 = _interopRequireDefault(_metatraderAccountApi);

var _metatraderAccount = require('../clients/metaApi/metatraderAccount.client');

var _metatraderAccount2 = _interopRequireDefault(_metatraderAccount);

var _metatraderDemoAccountApi = require('./metatraderDemoAccountApi');

var _metatraderDemoAccountApi2 = _interopRequireDefault(_metatraderDemoAccountApi);

var _metatraderDemoAccount = require('../clients/metaApi/metatraderDemoAccount.client');

var _metatraderDemoAccount2 = _interopRequireDefault(_metatraderDemoAccount);

var _historicalMarketData = require('../clients/metaApi/historicalMarketData.client');

var _historicalMarketData2 = _interopRequireDefault(_historicalMarketData);

var _connectionRegistry = require('./connectionRegistry');

var _connectionRegistry2 = _interopRequireDefault(_connectionRegistry);

var _errorHandler = require('../clients/errorHandler');

var _optionsValidator = require('../clients/optionsValidator');

var _optionsValidator2 = _interopRequireDefault(_optionsValidator);

var _latencyMonitor = require('./latencyMonitor');

var _latencyMonitor2 = _interopRequireDefault(_latencyMonitor);

var _expertAdvisor = require('../clients/metaApi/expertAdvisor.client');

var _expertAdvisor2 = _interopRequireDefault(_expertAdvisor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Request retry options
 * @typedef {Object} RetryOpts
 * @property {Number} [retries] maximum amount of request retries, default value is 5
 * @property {Number} [minDelayInSeconds] minimum delay in seconds until request retry, default value is 1
 * @property {Number} [maxDelayInSeconds] maximum delay in seconds until request retry, default value is 30
 */

/**
 * Options for processing websocket client events
 * @typedef {Object} EventProcessingOpts
 * @property {Boolean} [sequentialProcessing] an option to process synchronization events after finishing
 * previous ones
 */

/**
 * MetaApi options
 * @typedef {Object} MetaApiOpts
 * @property {String} [application] application id
 * @property {String} [domain] domain to connect to, default is agiliumtrade.agiliumtrade.ai
 * @property {Number} [requestTimeout] timeout for socket requests in seconds
 * @property {Number} [connectTimeout] timeout for connecting to server in seconds
 * @property {Number} [packetOrderingTimeout] packet ordering timeout in seconds
 * @property {PacketLoggerOpts} [packetLogger] packet logger options
 * @property {Boolean} [enableLatencyMonitor] an option to enable latency tracking
 * @property {Boolean} [enableLatencyTracking] an option to enable latency tracking
 * @property {SynchronizationThrottlerOpts} [synchronizationThrottler] options for synchronization throttler
 * @property {RetryOpts} [retryOpts] options for request retries
 * @property {EventProcessingOpts} [eventProcessing] options for request retries
 * @property {Boolean} [useSharedClientApi] option to use a shared server
 */

/**
 * MetaApi MetaTrader API SDK
 */
class MetaApi {

  /**
   * Constructs MetaApi class instance
   * @param {String} token authorization token
   * @param {MetaApiOpts} opts application options
   */
  // eslint-disable-next-line complexity
  constructor(token, opts) {
    const validator = new _optionsValidator2.default();
    opts = opts || {};
    const application = opts.application || 'MetaApi';
    const domain = opts.domain || 'agiliumtrade.agiliumtrade.ai';
    const requestTimeout = validator.validateNonZero(opts.requestTimeout, 60, 'requestTimeout');
    const historicalMarketDataRequestTimeout = validator.validateNonZero(opts.historicalMarketDataRequestTimeout, 240, 'historicalMarketDataRequestTimeout');
    const connectTimeout = validator.validateNonZero(opts.connectTimeout, 60, 'connectTimeout');
    const packetOrderingTimeout = validator.validateNonZero(opts.packetOrderingTimeout, 60, 'packetOrderingTimeout');
    const retryOpts = opts.retryOpts || {};
    const packetLogger = opts.packetLogger || {};
    const synchronizationThrottler = opts.synchronizationThrottler || {};
    const demoAccountRequestTimeout = validator.validateNonZero(opts.demoAccountRequestTimeout, 240, 'demoAccountRequestTimeout');
    if (!application.match(/[a-zA-Z0-9_]+/)) {
      throw new _errorHandler.ValidationError('Application name must be non-empty string consisting from letters, digits and _ only');
    }
    const eventProcessing = opts.eventProcessing;
    const useSharedClientApi = opts.useSharedClientApi || false;
    let httpClient = new _httpClient2.default(requestTimeout, retryOpts);
    let historicalMarketDataHttpClient = new _httpClient2.default(historicalMarketDataRequestTimeout, retryOpts);
    let demoAccountHttpClient = new _httpClient2.default(demoAccountRequestTimeout, retryOpts);
    this._metaApiWebsocketClient = new _metaApiWebsocket2.default(httpClient, token, { application, domain, requestTimeout,
      connectTimeout, packetLogger, packetOrderingTimeout, synchronizationThrottler, retryOpts,
      eventProcessing, useSharedClientApi });
    this._provisioningProfileApi = new _provisioningProfileApi2.default(new _provisioningProfile2.default(httpClient, token, domain));
    this._connectionRegistry = new _connectionRegistry2.default(this._metaApiWebsocketClient, application);
    let historicalMarketDataClient = new _historicalMarketData2.default(historicalMarketDataHttpClient, token, domain);
    this._metatraderAccountApi = new _metatraderAccountApi2.default(new _metatraderAccount2.default(httpClient, token, domain), this._metaApiWebsocketClient, this._connectionRegistry, new _expertAdvisor2.default(httpClient, token, domain), historicalMarketDataClient);
    this._metatraderDemoAccountApi = new _metatraderDemoAccountApi2.default(new _metatraderDemoAccount2.default(demoAccountHttpClient, token, domain));
    if (opts.enableLatencyTracking || opts.enableLatencyMonitor) {
      this._latencyMonitor = new _latencyMonitor2.default();
      this._metaApiWebsocketClient.addLatencyListener(this._latencyMonitor);
    }
  }

  /**
   * Returns provisioning profile API
   * @returns {ProvisioningProfileApi} provisioning profile API
   */
  get provisioningProfileApi() {
    return this._provisioningProfileApi;
  }

  /**
   * Returns MetaTrader account API
   * @return {MetatraderAccountApi} MetaTrader account API
   */
  get metatraderAccountApi() {
    return this._metatraderAccountApi;
  }

  /**
   * Returns MetaTrader demo account API
   * @return {MetatraderDemoAccountApi} MetaTrader demo account API
   */
  get metatraderDemoAccountApi() {
    return this._metatraderDemoAccountApi;
  }

  /**
   * Returns MetaApi application latency monitor
   * @return {LatencyMonitor} latency monitor
   */
  get latencyMonitor() {
    return this._latencyMonitor;
  }

  /**
   * Closes all clients and connections
   */
  close() {
    this._metaApiWebsocketClient.removeLatencyListener(this._latencyMonitor);
    this._metaApiWebsocketClient.close();
  }

}
exports.default = MetaApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,