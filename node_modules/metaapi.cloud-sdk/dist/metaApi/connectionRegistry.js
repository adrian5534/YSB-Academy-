'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _metaApiConnection = require('./metaApiConnection');

var _metaApiConnection2 = _interopRequireDefault(_metaApiConnection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Manages account connections
 */
class ConnectionRegistry {

  /**
   * Constructs a MetaTrader connection registry instance
   * @param {MetaApiWebsocketClient} metaApiWebsocketClient MetaApi websocket client
   * @param {String} application application id
   */
  constructor(metaApiWebsocketClient, application = 'MetaApi') {
    this._metaApiWebsocketClient = metaApiWebsocketClient;
    this._application = application;
    this._connections = {};
    this._connectionLocks = {};
  }

  /**
   * Creates and returns a new account connection if doesnt exist, otherwise returns old
   * @param {MetatraderAccount} account MetaTrader account id to connect to
   * @param {HistoryStorage} historyStorage terminal history storage
   * @param {Date} [historyStartTime] history start time
   */
  async connect(account, historyStorage, historyStartTime) {
    if (this._connections[account.id]) {
      return this._connections[account.id];
    } else {
      while (this._connectionLocks[account.id]) {
        await this._connectionLocks[account.id].promise;
      }
      if (this._connections[account.id]) {
        return this._connections[account.id];
      }
      let connectionLockResolve;
      this._connectionLocks[account.id] = { promise: new _promise2.default(res => connectionLockResolve = res) };
      const connection = new _metaApiConnection2.default(this._metaApiWebsocketClient, account, historyStorage, this, historyStartTime);
      try {
        await connection.initialize();
        await connection.subscribe();
        this._connections[account.id] = connection;
      } finally {
        delete this._connectionLocks[account.id];
        connectionLockResolve();
      }
      return connection;
    }
  }

  /**
   * Removes an account from registry
   * @param {string} accountId MetaTrader account id to remove
   */
  remove(accountId) {
    if (this._connections[accountId]) {
      delete this._connections[accountId];
    }
  }

  /**
   * Returns application type
   * @return {String} application type
   */
  get application() {
    return this._application;
  }
}
exports.default = ConnectionRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tZXRhQXBpL2Nvbm5lY3Rpb25SZWdpc3RyeS5lczYiXSwibmFtZXMiOlsiQ29ubmVjdGlvblJlZ2lzdHJ5IiwiY29uc3RydWN0b3IiLCJtZXRhQXBpV2Vic29ja2V0Q2xpZW50IiwiYXBwbGljYXRpb24iLCJfbWV0YUFwaVdlYnNvY2tldENsaWVudCIsIl9hcHBsaWNhdGlvbiIsIl9jb25uZWN0aW9ucyIsIl9jb25uZWN0aW9uTG9ja3MiLCJjb25uZWN0IiwiYWNjb3VudCIsImhpc3RvcnlTdG9yYWdlIiwiaGlzdG9yeVN0YXJ0VGltZSIsImlkIiwicHJvbWlzZSIsImNvbm5lY3Rpb25Mb2NrUmVzb2x2ZSIsInJlcyIsImNvbm5lY3Rpb24iLCJNZXRhQXBpQ29ubmVjdGlvbiIsImluaXRpYWxpemUiLCJzdWJzY3JpYmUiLCJyZW1vdmUiLCJhY2NvdW50SWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0FBRUE7OztBQUdlLE1BQU1BLGtCQUFOLENBQXlCOztBQUV0Qzs7Ozs7QUFLQUMsY0FBWUMsc0JBQVosRUFBb0NDLGNBQWMsU0FBbEQsRUFBNkQ7QUFDM0QsU0FBS0MsdUJBQUwsR0FBK0JGLHNCQUEvQjtBQUNBLFNBQUtHLFlBQUwsR0FBb0JGLFdBQXBCO0FBQ0EsU0FBS0csWUFBTCxHQUFvQixFQUFwQjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLFFBQU1DLE9BQU4sQ0FBY0MsT0FBZCxFQUF1QkMsY0FBdkIsRUFBdUNDLGdCQUF2QyxFQUF5RDtBQUN2RCxRQUFJLEtBQUtMLFlBQUwsQ0FBa0JHLFFBQVFHLEVBQTFCLENBQUosRUFBbUM7QUFDakMsYUFBTyxLQUFLTixZQUFMLENBQWtCRyxRQUFRRyxFQUExQixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxLQUFLTCxnQkFBTCxDQUFzQkUsUUFBUUcsRUFBOUIsQ0FBUCxFQUEwQztBQUN4QyxjQUFNLEtBQUtMLGdCQUFMLENBQXNCRSxRQUFRRyxFQUE5QixFQUFrQ0MsT0FBeEM7QUFDRDtBQUNELFVBQUksS0FBS1AsWUFBTCxDQUFrQkcsUUFBUUcsRUFBMUIsQ0FBSixFQUFtQztBQUNqQyxlQUFPLEtBQUtOLFlBQUwsQ0FBa0JHLFFBQVFHLEVBQTFCLENBQVA7QUFDRDtBQUNELFVBQUlFLHFCQUFKO0FBQ0EsV0FBS1AsZ0JBQUwsQ0FBc0JFLFFBQVFHLEVBQTlCLElBQW9DLEVBQUNDLFNBQVMsc0JBQVlFLE9BQU9ELHdCQUF3QkMsR0FBM0MsQ0FBVixFQUFwQztBQUNBLFlBQU1DLGFBQWEsSUFBSUMsMkJBQUosQ0FBc0IsS0FBS2IsdUJBQTNCLEVBQW9ESyxPQUFwRCxFQUE2REMsY0FBN0QsRUFBNkUsSUFBN0UsRUFDakJDLGdCQURpQixDQUFuQjtBQUVBLFVBQUk7QUFDRixjQUFNSyxXQUFXRSxVQUFYLEVBQU47QUFDQSxjQUFNRixXQUFXRyxTQUFYLEVBQU47QUFDQSxhQUFLYixZQUFMLENBQWtCRyxRQUFRRyxFQUExQixJQUFnQ0ksVUFBaEM7QUFDRCxPQUpELFNBSVU7QUFDUixlQUFPLEtBQUtULGdCQUFMLENBQXNCRSxRQUFRRyxFQUE5QixDQUFQO0FBQ0FFO0FBQ0Q7QUFDRCxhQUFPRSxVQUFQO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBSSxTQUFPQyxTQUFQLEVBQWtCO0FBQ2hCLFFBQUksS0FBS2YsWUFBTCxDQUFrQmUsU0FBbEIsQ0FBSixFQUFrQztBQUNoQyxhQUFPLEtBQUtmLFlBQUwsQ0FBa0JlLFNBQWxCLENBQVA7QUFDRDtBQUNGOztBQUVEOzs7O0FBSUEsTUFBSWxCLFdBQUosR0FBa0I7QUFDaEIsV0FBTyxLQUFLRSxZQUFaO0FBQ0Q7QUE5RHFDO2tCQUFuQkwsa0IiLCJmaWxlIjoiY29ubmVjdGlvblJlZ2lzdHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ldGFBcGlDb25uZWN0aW9uIGZyb20gJy4vbWV0YUFwaUNvbm5lY3Rpb24nO1xuXG4vKipcbiAqIE1hbmFnZXMgYWNjb3VudCBjb25uZWN0aW9uc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25uZWN0aW9uUmVnaXN0cnkge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgTWV0YVRyYWRlciBjb25uZWN0aW9uIHJlZ2lzdHJ5IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7TWV0YUFwaVdlYnNvY2tldENsaWVudH0gbWV0YUFwaVdlYnNvY2tldENsaWVudCBNZXRhQXBpIHdlYnNvY2tldCBjbGllbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFwcGxpY2F0aW9uIGFwcGxpY2F0aW9uIGlkXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXRhQXBpV2Vic29ja2V0Q2xpZW50LCBhcHBsaWNhdGlvbiA9ICdNZXRhQXBpJykge1xuICAgIHRoaXMuX21ldGFBcGlXZWJzb2NrZXRDbGllbnQgPSBtZXRhQXBpV2Vic29ja2V0Q2xpZW50O1xuICAgIHRoaXMuX2FwcGxpY2F0aW9uID0gYXBwbGljYXRpb247XG4gICAgdGhpcy5fY29ubmVjdGlvbnMgPSB7fTtcbiAgICB0aGlzLl9jb25uZWN0aW9uTG9ja3MgPSB7fTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYWNjb3VudCBjb25uZWN0aW9uIGlmIGRvZXNudCBleGlzdCwgb3RoZXJ3aXNlIHJldHVybnMgb2xkXG4gICAqIEBwYXJhbSB7TWV0YXRyYWRlckFjY291bnR9IGFjY291bnQgTWV0YVRyYWRlciBhY2NvdW50IGlkIHRvIGNvbm5lY3QgdG9cbiAgICogQHBhcmFtIHtIaXN0b3J5U3RvcmFnZX0gaGlzdG9yeVN0b3JhZ2UgdGVybWluYWwgaGlzdG9yeSBzdG9yYWdlXG4gICAqIEBwYXJhbSB7RGF0ZX0gW2hpc3RvcnlTdGFydFRpbWVdIGhpc3Rvcnkgc3RhcnQgdGltZVxuICAgKi9cbiAgYXN5bmMgY29ubmVjdChhY2NvdW50LCBoaXN0b3J5U3RvcmFnZSwgaGlzdG9yeVN0YXJ0VGltZSkge1xuICAgIGlmICh0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50LmlkXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25zW2FjY291bnQuaWRdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAodGhpcy5fY29ubmVjdGlvbkxvY2tzW2FjY291bnQuaWRdKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2Nvbm5lY3Rpb25Mb2Nrc1thY2NvdW50LmlkXS5wcm9taXNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2Nvbm5lY3Rpb25zW2FjY291bnQuaWRdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50LmlkXTtcbiAgICAgIH1cbiAgICAgIGxldCBjb25uZWN0aW9uTG9ja1Jlc29sdmU7XG4gICAgICB0aGlzLl9jb25uZWN0aW9uTG9ja3NbYWNjb3VudC5pZF0gPSB7cHJvbWlzZTogbmV3IFByb21pc2UocmVzID0+IGNvbm5lY3Rpb25Mb2NrUmVzb2x2ZSA9IHJlcyl9O1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyBNZXRhQXBpQ29ubmVjdGlvbih0aGlzLl9tZXRhQXBpV2Vic29ja2V0Q2xpZW50LCBhY2NvdW50LCBoaXN0b3J5U3RvcmFnZSwgdGhpcyxcbiAgICAgICAgaGlzdG9yeVN0YXJ0VGltZSk7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmluaXRpYWxpemUoKTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnNbYWNjb3VudC5pZF0gPSBjb25uZWN0aW9uO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2Nvbm5lY3Rpb25Mb2Nrc1thY2NvdW50LmlkXTtcbiAgICAgICAgY29ubmVjdGlvbkxvY2tSZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBhY2NvdW50IGZyb20gcmVnaXN0cnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjY291bnRJZCBNZXRhVHJhZGVyIGFjY291bnQgaWQgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmUoYWNjb3VudElkKSB7XG4gICAgaWYgKHRoaXMuX2Nvbm5lY3Rpb25zW2FjY291bnRJZF0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9jb25uZWN0aW9uc1thY2NvdW50SWRdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFwcGxpY2F0aW9uIHR5cGVcbiAgICogQHJldHVybiB7U3RyaW5nfSBhcHBsaWNhdGlvbiB0eXBlXG4gICAqL1xuICBnZXQgYXBwbGljYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9uO1xuICB9XG59XG4iXX0=